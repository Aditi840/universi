import importlib
import shutil
import sys
from contextvars import ContextVar
from datetime import date
from pathlib import Path
from types import ModuleType

import pytest
from pytest_fixture_classes import fixture_class

from tests._data import latest
from universi import regenerate_dir_to_all_versions
from universi.structure import Version, VersionBundle, VersionChange
from universi.structure.enums import AlterEnumSubInstruction
from universi.structure.schemas import AlterSchemaSubInstruction

CURRENT_DIR = Path(__file__).parent


@pytest.fixture(autouse=True, scope="module")
def _remove_generated_files():
    yield
    shutil.rmtree(CURRENT_DIR / "_data/unions", ignore_errors=True)
    shutil.rmtree(CURRENT_DIR / "_data/v2000_01_01", ignore_errors=True)
    shutil.rmtree(CURRENT_DIR / "_data/v2001_01_01", ignore_errors=True)
    shutil.rmtree(CURRENT_DIR / "_data/v2002_01_01", ignore_errors=True)
    shutil.rmtree("tests/_data/latest/another_temp1", ignore_errors=True)
    shutil.rmtree("tests/_data/latest/another_temp1", ignore_errors=True)
    for module_name in list(sys.modules):
        if module_name.startswith("tests._data.latest.another_temp1"):
            del sys.modules[module_name]


@pytest.fixture()
def _reload_autogenerated_modules(request: pytest.FixtureRequest):
    for module_name in tuple(sys.modules):
        if module_name.startswith("tests._data"):
            del sys.modules[module_name]

    importlib.reload(request.module)


@pytest.fixture()
def api_version_var():
    api_version_var = ContextVar("api_version_var")
    api_version_var.set(None)
    return api_version_var


@fixture_class(name="generate_test_version_packages")
class GenerateTestVersionPackages:
    api_version_var: ContextVar[date | None]

    def __call__(
        self,
        *instructions: AlterSchemaSubInstruction | AlterEnumSubInstruction,
        package: ModuleType = latest,
    ) -> tuple[ModuleType, ModuleType]:
        class SomeVersionChange(VersionChange):
            description = "..."
            instructions_to_migrate_to_previous_version = instructions

        regenerate_dir_to_all_versions(
            package,
            VersionBundle(
                Version(date(2001, 1, 1), SomeVersionChange),
                Version(date(2000, 1, 1)),
                api_version_var=self.api_version_var,
            ),
        )

        from tests._data import v2000_01_01, v2001_01_01  # pyright: ignore[reportGeneralTypeIssues]

        return v2000_01_01, v2001_01_01
